---
name: "Jellyfin manifest manager"
description: "Update a Jellyfin manifest file in a GitHub repository, and publish to gh-pages."
author: "LizardByte"
inputs:
  branch:
    description: "The branch where gh-pages is hosted."
    default: "gh-pages"
    required: false
  gh_pages_url:
    description: "The URL where the gh-pages branch is hosted."
    default: "https://lizardbyte.github.io/jellyfin-plugin-repo"
    required: false
  github_token:
    description: "The GitHub token used to push to the gh-pages branch."
    required: true
  release_tag:
    description: "The tag name of the release."
    default: "latest"
    required: true
  repository:
    description: "The repository where gh-pages is hosted."
    default: "LizardByte/jellyfin-plugin-repo"
    required: false
  plugin_url:
    description: "The URL where the plugin zip file is (or will be) hosted. This will be evaluated if empty"
    default: ""
    required: false
  zipfile:
    description: "The path to the plugin zip file. This will be evaluated if empty"
    default: ""
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup inputs
      id: inputs
      shell: bash
      run: |
        branch=${{ inputs.branch }}
        gh_pages_url=${{ inputs.gh_pages_url }}
        repository=${{ inputs.repository }}
        release_tag=${{ inputs.release_tag }}

        if [ -z "${{ inputs.zipfile }}" ]; then
          # repository name in lowercase
          repository_name=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')
          zipfile_name=${repository_name}.zip
          zipfile_path=${{ github.workspace }}/${repository_name}.zip
        else
          echo "zipfile_name=$(basename ${{ inputs.zipfile }})" >> $GITHUB_OUTPUT
          echo "zipfile_path=${{ inputs.zipfile }}" >> $GITHUB_OUTPUT
        fi

        if [ -z "${{ inputs.plugin-url }}" ]; then
          plugin_url=${{ github.event.repository.html_url }}/releases/download/${{ release_tag }}/${zipfile_name}
        else
          plugin_url=${{ inputs.plugin_url }}
        fi

        echo "branch=${{ branch }}" >> $GITHUB_OUTPUT
        echo "gh_pages_url=${{ gh_pages_url }}" >> $GITHUB_OUTPUT
        echo "repository=${{ repository }}" >> $GITHUB_OUTPUT
        echo "release_tag=${{ release_tag }}" >> $GITHUB_OUTPUT

        echo "plugin_url=${{ plugin_url }}" >> $GITHUB_OUTPUT
        echo "zipfile_name=${zipfile_name}.zip" >> $GITHUB_OUTPUT
        echo "zipfile_path=${zipfile_path}.zip" >> $GITHUB_OUTPUT

    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        update-environment: false

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        ${{ steps.setup-python.outputs.python-path }} -m pip install --upgrade pip setuptools wheel
        ${{ steps.setup-python.outputs.python-path }} -m pip install -r requirements.txt

    - name: Checkout gh-pages
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.inputs.outputs.branch }}
        repository: ${{ steps.inputs.outputs.repository }}
        path: ${{ steps.inputs.outputs.branch }}

    - name: JPRM repo init/add
      shell: bash
      run: |
        # initialize repo if it doesn't exist
        ${{ steps.setup-python.outputs.python-path }} \
          -m jprm \
          repo init \
          ${{ steps.inputs.outputs.branch }} || true  # ignore error if already exists

        # add plugin to repo
        ${{ steps.setup-python.outputs.python-path }} \
          -m jprm \
          repo add \
          --url ${{ steps.inputs.outputs.gh_pages_url }} \
          --plugin-url ${{ steps.inputs.outputs.plugin_url }} \
          ${{ steps.inputs.outputs.branch }} \
          ${{ steps.inputs.outputs.zipfile_path }}

    - name: Publish gh-pages
      uses: actions-js/push@v1.4
      with:
        github_token: ${{ inputs.github_token }}
        directory: ${{ steps.inputs.outputs.branch }}
        branch: ${{ steps.inputs.outputs.branch }}
        force: false
        message: "Bump ${{ steps.inputs.outputs.repository }} to ${{ steps.inputs.outputs.release_tag }}"
